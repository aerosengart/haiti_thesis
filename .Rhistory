#==============================================================================#
# ATLAS Team 3: Data Cleaning                                                  #
#     Author: Anna Rosengart                                                   #
#     Last Updated: 15 June 2021
#     Requires: `Clinical Data PAMPer.xlsx`, `Cytokine layer of PAMPer.xlsx,   #
#               `EC layer of PAMPer.xlsx`, `Metabolomics layer of PAMPer.xlsx, #
#               `Lipidomics 03 31 2020 Quantitative.csv`                       #
#     Output: `T2_cleaned_clinical.csv`, `T2_cleaned_cytokines.csv`,           #
#             `T2_cleaned_metabolomics.csv`, `T2_ec.csv`,                      #
#             `T2_cleaned_lipidomics.csv` in subdirectory T2_Cleaned_Data      #
#     Instructions: Place this file in the directory that contains the above   #
#                   required files. Source this script.                        #
#==============================================================================#
################################################################################
##----libraries---------------------------------------------------------------##
################################################################################
library(tidyverse) # data manipulation
library(readxl) # reading Excel files
library(dplyr) # data manipulation
library(reshape2) # data shaping
library(stringr) # string manipulation
library(rstudioapi) # rstudio api for directory
library(lubridate) # date manipulation
library(xlsx) # writing Excel files
## set working directory for paths
setwd(dirname(getActiveDocumentContext()$path))
dir.create("T2_cleaned_data", showWarnings = FALSE) # make output directory
################################################################################
##----helper functions--------------------------------------------------------##
################################################################################
## function to categorize the mechanisms of injury
categorize_inj <- function(df) {
for (i in 1:nrow(df)) {
x <- df[i, ]
if (x["injury_type"] == "1") { # blunt force trauma
switch(as.character(x["blunt_mechanism"]),
"1" = {df[i, "mechanism"] <- "Fall"},
"2" = {df[i, "mechanism"] <- "Machinery"},
"3" = {df[i, "mechanism"] <- "MVC - Occupant"},
"4" = {df[i, "mechanism"] <- "MVC - Motorcyclist"},
"5" = {df[i, "mechanism"] <- "MVC - Cyclist"},
"6" = {df[i, "mechanism"] <- "MVC - Pedestrian"},
"7" = {df[i, "mechanism"] <- "MVC - Unknown"},
"8" = {df[i, "mechanism"] <- "Struck By/Against"},
"9" = {df[i, "mechanism"] <- "Other"}
)
}
else if (x["injury_type"] == "2") { # penetrating trauma
switch(as.character(x["penetrating_mechanism"]),
"1" = {df[i, "mechanism"] <- "Firearm"},
"2" = {df[i, "mechanism"] <- "Impalement"},
"3" = {df[i, "mechanism"] <- "Stabbing"}
)
}
else { # both blunt and penetrating
df[i, "mechanism"] <- "Blunt/Penetrating"
}
}
return(df)
}
## function to categorize shock index
categorize_shock <- function(df) {
for (i in 1:nrow(df)) {
x <- df[i, ]
df[i, "in_shock"] <- "No"
if (!is.na(x["shock_index"]) && x["shock_index"] > 0.7) { # high shock index
df[i, "in_shock"] <- "Yes"
}
else { # low shock index
if ((!is.na(x["map"])) && (x["map"] < 65)) { # low MAP
df[i, "in_shock"] <- "Yes"
}
else if ((!is.na(x["sys_blood_pressure"]) && (x["sys_blood_pressure"] < 90))) { # low sbp
if (x["sys_blood_pressure"] < 70) { # very low sbp
df[i, "in_shock"] <- "Yes"
}
if ((!is.na(x["heart_rate"])) && (x["heart_rate"] > 108)) { # high hr
df[i, "in_shock"] <- "Yes"
}
if ((!is.na(x["lactate"])) && (x["lactate"] > 3)) { # high lactate
df[i, "in_shock"] <- "Yes"
}
if ((!is.na(x["hco3"])) && (x["hco3"] < 22)) { # low bicarbonate
df[i, "in_shock"] <- "Yes"
}
}
}
}
return(df)
}
## function to categorize injury severity
categorize_severity <- function(df) {
for (i in 1:nrow(df)) {
x <- df[i, ]
if (is.na(x["iss"])) { # no ISS
df[i, "iss_cohort"] <- NA
}
if (x["iss"] < 16) { # mild injury
df[i, "iss_cohort"] <- "Mild"
}
else if (x["iss"] < 24) { # moderate injury
df[i, "iss_cohort"] <- "Moderate"
}
else { # severe injury
df[i, "iss_cohort"] <- "Severe"
}
}
return(df)
}
## function to categorize plasma recipients
categorize_plasma <- function(df) {
for (i in 1:nrow(df)) {
x <- df[i, ]
if (is.na(unlist(x["thawed_plasma"]))) { # did not receive thawed plasma --- control group
df[i, "group"] <- "Control"
}
else { # received thawed plasma --- experimental group
df[i, "group"] <- "Experimental"
}
}
return(df)
}
## function to categorize trauma type
categorize_trauma <- function(df) {
for (i in 1:nrow(df)) {
x <- df[i, ]
if (x["injury_type"] == "3") { #  both types of trauma
df[i, "trauma_type"] <- "Blunt and Penetrating"
}
else if (x["injury_type"] == "1") { # blunt force trauma
df[i, "trauma_type"] <- "Blunt Force"
}
else { # penetrating trauma
df[i, "trauma_type"] <- "Penetrating"
}
}
return(df)
}
## function to find survival
death_date <- function(df) {
for (i in 1:nrow(df)) {
x <- df[i, ]
if (!is.na(x["alive_at_30"])) {
if (x["alive_at_30"] == 3) { # unknown
df[i, "days_to_death"] <- NA
}
else if (is.na(x["entry_date"])) { # unknown
df[i, "days_to_death"] <- NA
}
else if (x["alive_at_30"] == 2) { # death before 30 days
if (!is.na(x["date_of_death"])) {
ent <- x["entry_date"]$entry_date
ex <- x["date_of_death"]$date_of_death
days <- difftime(as.Date(ex), as.Date(ent), units = "days")
df[i, "days_to_death"] <- as.numeric(days)
}
else if (!is.na(x["discharge_date"])) { # death before 30 days
ent <- x["entry_date"]$entry_date
ex <- x["discharge_date"]$discharge_date
days <- difftime(ex, ent, units = "days")
df[i, "days_to_death"] <- as.numeric(days)
}
else { # unknown
df[i, "days_to_death"] <- NA
}
}
else { # survivors
df[i, "days_to_death"] <- -1
}
}
else { # unknown
df[i, "days_to_death"] <- NA
}
}
return (df)
}
## function to recategorize outcomes
categorize_death <- function(df) {
for (i in 1:nrow(df)) {
x <- df[i, ]
if ((!is.na(x["alive_at_30"]) && x["alive_at_30"] == 1) || ## already know they're alive at 30d
(!is.na(x["status"]) && x["status"] == "Resolver") || ## is a resolver
(!is.na(x["days_to_death"]) && x["days_to_death"] > 30) || ## death after 30d
(!is.na(x["days_hospital"]) && x["days_hospital"] > 29)) { # in hospital for 30d or more
df[i, "death"] <- "30d Survivor"
}
else if ((!is.na(x["alive_at_30"]) && x["alive_at_30"] == 2) || ## already know they're not alive at 30d
(!is.na(x["status"]) && x["status"] == "Early Non-Survivor") || ## is an early non-survivor
(!is.na(x["days_to_death"]) && x["days_to_death"] < 30)) { ## death in fewer than 30d
df[i, "death"] <- "30d Non-Survivor"
}
else {
df[i, "death"] <- NA
}
}
return (df)
}
## function to categorize trauma type
categorize_status <- function(df, hospital, outcomes) {
for (i in 1:nrow(df)) {
x <- df[i, ]
if (is.na(x["outcome"])) { # no outcome in outcomes table
if (is.na(x["icu_los"])) { # if no icu stay from discharge sheet, replace with values from hospital sheet
if (is.na(x["days_icu"])) { # no data on hospital/icu stay in any sheet -> unknown status
df[i, "status"] <- NA
next # go to next row
}
x["icu_los"] <- x["days_icu"]
df[i, "icu_los"] <- x["days_icu"]
}
if (x["icu_los"] >= 7) { # in icu for greater than 7 days
df[i, "status"] <- "Non-Resolver"
}
else { # in icu for fewer than 7 days
if (is.na(x["date_of_death"])) { # no patient death
df[i, "status"] <- "Resolver"
}
else if (x["icu_los"] < 3 && !is.na(x["date_of_death"])) { # death within 72 hours
df[i, "status"] <- "Early Non-Survivor"
}
else { # death after 72 hours
df[i, "status"] <- "Non-Resolver"
}
}
}
else { # outcome recorded in table
df[i, "status"] <- x["outcome"]
}
}
return(df)
}
################################################################################
##----read in sheets of interest from `Clinical Data PAMPer.xlsx`-------------##
################################################################################
## get PAMPER and CRISMA ids --- 564 obs.
clin_dat_ids <- read_excel("Clinical Data PAMPer.xlsx", sheet = "IDs Dictionary") %>%
rename(CRISMAID = `CRISMA ID`) %>% # rename `CRISMA ID` as `CRISMAID`
rename("study_id" = `Study ID`) %>% # rename column
mutate(CRISMAID = as.character(CRISMAID)) %>% # convert column values to character type
mutate(PAMPERID = as.character(PAMPERID))
## get injury data --- 541 obs
clin_dat_init_inj <- read_excel("Clinical Data PAMPer.xlsx", sheet = "Subj_Initial Injury") %>%
select(stnum, injury_type, blunt_mechanism, penetrating_mechanism,
traumatic_brain_injury, ais_abdomen, ais_chest, ais_extremity,
ais_face, ais_head, iss) %>% # select desired columns
rename(CRISMAID = stnum) %>% # rename `stnum` column as `CRISMAID`
drop_na(iss) %>% # omit rows without value in `iss`
categorize_inj() %>% # categorize the injuries by type
select(-c(blunt_mechanism, penetrating_mechanism)) %>% # remove mechanism columns
distinct(CRISMAID, .keep_all = TRUE) %>% # remove duplicate entries by CRISMAID
mutate(tbi = ifelse(traumatic_brain_injury == 1, "Yes", ifelse(traumatic_brain_injury == 2, "No", NA))) %>% # categorize tbi
mutate(abdominal_inj = ifelse(ais_abdomen > 0, "Yes", "No"),
chest_inj = ifelse(ais_chest > 0, "Yes", "No"),
extremity_inj = ifelse(ais_extremity > 0, "Yes", "No"),
face_inj = ifelse(ais_face > 0, "Yes", "No"),
head_inj = ifelse(ais_head > 0, "Yes", "No")) %>% # categorize injury locations
categorize_trauma() %>% # categorize type of trauma
select(-c(traumatic_brain_injury, injury_type)) %>% # remove columns
select(CRISMAID, trauma_type, mechanism, iss, tbi, everything()) # reorder columns
clin_dat_init_inj$iss <- as.numeric(clin_dat_init_inj$iss) # iss to numeric
clin_dat_init_inj <- categorize_severity(clin_dat_init_inj)
## get hospital data
clin_dat_hosp <- read_excel("Clinical Data PAMPer.xlsx", sheet = "Subj_Hospital") %>%
select(stnum, day_in_hospital, date_in_hospital, icu) %>% # select desired columns
rename(CRISMAID = stnum) %>% # rename `stnum` column as `CRISMAID`
group_by(CRISMAID) %>% # group by ID
arrange(CRISMAID, day_in_hospital) %>% # arrange by day
filter(day_in_hospital >= 0) # filter negative values --- not recorded
entries <- data.frame(clin_dat_hosp$CRISMAID, ymd(clin_dat_hosp$date_in_hospital))
colnames(entries) <- c("CRISMAID", "entry_date")
clin_dat_hosp <- clin_dat_hosp %>%
summarise(days_hospital = n(), days_icu = sum(icu == 1)) %>%
left_join(entries, by = c("CRISMAID" = "CRISMAID")) %>%
group_by(CRISMAID) %>%
filter(entry_date == min(entry_date))
## get outcomes data --- 501 obs.
outcomes <- read.csv("Outcome.table.csv")
outcomes$PAID <- as.character(outcomes$PAID)
outcomes <- outcomes %>%
full_join(clin_dat_ids, by = c("PAID" = "PAMPERID")) %>% # get CRISMAIDs
select(PAID, CRISMAID, outcome) %>%
mutate(outcome = ifelse(outcome == "Resolving", "Resolver", ifelse(outcome == "Non-resolving", "Non-Resolver", "Early Non-Survivor"))) # rename values
## get discharge data --- 558 obs. (28 NA, 15 NA after merge with outcomes table)
clin_dat_disch <- read_excel("Clinical Data PAMPer.xlsx", sheet = "Subj_Discharge") %>%
select(stnum, icu_los, date_of_death, discharge_date, alive_at_30) %>% # select desired columns
full_join(clin_dat_ids, by = c("stnum" = "CRISMAID")) %>% # get CRISMAIDs
full_join(clin_dat_hosp, by = c("stnum" = "CRISMAID")) %>%
full_join(outcomes, by = c("PAMPERID" = "PAID")) %>%
mutate(date_of_death = ymd_hms(date_of_death)) %>%
mutate(discharge_date = ymd_hms(discharge_date)) %>%
mutate(entry_date = ymd(entry_date)) %>%
death_date() %>%
categorize_status() %>% # categorize the patient status
categorize_death() %>%
select(CRISMAID, status, days_to_death, death) %>% # remove mechanism columns
distinct(CRISMAID, .keep_all = TRUE) # remove duplicate entries by CRISMAID
## get demographic data --- 4561 obs.
clin_dat_demo <- read_excel("Clinical Data PAMPer.xlsx", sheet = "Subj_PHI") %>%
select(stnum, age, gender) %>% # select desired columns
rename(CRISMAID = stnum) %>% # rename `stnum` column as `CRISMAID`
filter(gender != 3) %>% # filter unknown gender
mutate(gender = ifelse(gender == 1, "Male", "Female")) %>% # categorize gender
distinct(CRISMAID, .keep_all = TRUE) # remove duplicate entries by CRISMAID
clin_dat_demo$age <- as.numeric(clin_dat_demo$age) # age to numeric
## get lactate data --- 266 obs.
clin_dat_labs <- read_excel("Clinical Data PAMPer.xlsx", sheet = "Subj_Clinical Labs") %>%
select(stnum, collection_dt, lactate_val, lactate_type, bicarb) %>%  # select desired columns
rename(CRISMAID = stnum) %>% # rename `stnum` column as `CRISMAID`
separate(col = collection_dt, sep = " ", into = c("date", "time")) %>% # separate collection date and time
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>% # change dates to date format (just in case)
mutate(time = gsub(":", "", as.character(time))) %>% # remove colons from times
group_by(CRISMAID) %>% # group by CRISMAID for filtering
filter(time == min(time)) %>% # only keep first taken lactate measurements for each individual
select(-c(date, time)) # remove date and time columns
clin_dat_lac <- clin_dat_labs %>%
drop_na(lactate_val) # drop na lactate values
clin_dat_bicarb <- clin_dat_labs %>%
drop_na(bicarb) # drop na bicarb values
clin_dat_labs <- full_join(clin_dat_lac, clin_dat_bicarb, by = c("CRISMAID" = "CRISMAID")) %>% # join lactate and bicarb data
select(CRISMAID, lactate_val.x, lactate_type.x, bicarb.y) %>% # remove unnecessary columns
rename(lactate = lactate_val.x, lactate_type = lactate_type.x, hco3 = bicarb.y) %>% # rename columns
distinct(CRISMAID, .keep_all = TRUE) # remove duplicate entries by CRISMAID
## get ed data --- 557 obs.
clin_dat_ed <- read_excel("Clinical Data PAMPer.xlsx", sheet = "Subj_ED") %>%
select(stnum, ed_hosp_arrival_date, ed_initial_sbp, ed_initial_dbp, ed_initial_hr) %>%  # select desired columns
rename(CRISMAID = stnum) %>% # rename `stnum` column as `CRISMAID`
distinct(CRISMAID, .keep_all = TRUE) %>% # remove duplicate entries by CRISMAID
drop_na(ed_initial_sbp, ed_initial_hr) %>% # omit rows without values
separate(col = ed_hosp_arrival_date, sep = " ", into = c("date", "time")) %>% # separate collection date and time
mutate(ed_initial_hr = as.double(ed_initial_hr), ed_initial_sbp = as.double(ed_initial_sbp), ed_initial_dbp = as.double(ed_initial_dbp)) %>% # make columns numeric
filter(ed_initial_dbp > 1) %>% # remove DBP measurements below 2 because they don't make sense --- may be due to measurement error
mutate(shock_index = ed_initial_hr / ed_initial_sbp, map = (ed_initial_sbp + 2 * ed_initial_dbp) / 3) %>% # calculate shock index and map
drop_na(shock_index) %>% # remove NA shock_index
filter(is.finite(shock_index)) %>% # remove non-finite shock_index
select(-c(date, time)) %>% # remove date and time columns
rename(heart_rate = ed_initial_hr, sys_blood_pressure = ed_initial_sbp, dia_blood_pressure = ed_initial_dbp) # rename columns
## get thawed plasma data --- 562 obs.
clin_dat_preh <- read_excel("Clinical Data PAMPer.xlsx", sheet = "Subj_PreHospital") %>%
select(stnum, thawed_plasma) %>%  # select desired columns
rename(CRISMAID = stnum) %>% # rename `stnum` column as `CRISMAID`
categorize_plasma() %>% # find if in control group or not
select(-thawed_plasma) %>% # remove thawed_plasma column
distinct(CRISMAID, .keep_all = TRUE) # remove duplicate entries by CRISMAID
## get
## combine into one data frame
clin_dat <- left_join(clin_dat_ids, clin_dat_demo, by = c("CRISMAID" = "CRISMAID")) %>% # merge all data frames
left_join(clin_dat_init_inj, by = c("CRISMAID" = "CRISMAID")) %>%
left_join(clin_dat_disch, by = c("CRISMAID" = "CRISMAID")) %>%
left_join(clin_dat_ed, by = c("CRISMAID" = "CRISMAID")) %>%
left_join(clin_dat_preh, by = c("CRISMAID" = "CRISMAID")) %>%
left_join(clin_dat_labs, by = c("CRISMAID" = "CRISMAID"))
## categorize shock
clin_dat <- clin_dat %>%
categorize_shock() %>%
drop_na(trauma_type) %>% # remove those with no information about injury --- added during data frame merge
select(study_id, PAMPERID, CRISMAID, group, status, in_shock, iss_cohort, death, everything()) %>% # reorder columns
arrange(PAMPERID)
haiti_dat <- haiti1_agg_data()
##=============================================================================##
## Reproduction: Thesis Code                                                   ##
##=============================================================================##
## load packages/functions
library("ggplot2")
library("pomp")
library("dplyr")
library("purrr")
library("tidyverse")
library("magrittr")
library("GGally")
library("gridExtra")
library("cowplot")
library("doParallel")
source("mod_tools.R")
source("mod_vis.R")
source("forecast_tools.R")
source("mod_build.R")
source("haiti1_vacscen.R")
source("haiti1.R")
source("haiti1_joint.R")
source("haiti1_agg_data.R")
source("haiti1_data.R")
source("haiti1_covars.R")
plot_sim_dat <- function(simdat) {
plt <- ggplot(simdat, aes(x = week)) +
geom_line(aes(y = cases), colour = "blue", alpha = 0.5) +
geom_point(aes(y = orig), size = 1) +
theme_bw() +
xlim(0, 430) +
scale_y_continuous("cases", limits = c(0, 30000), oob = scales::squish)
return(plt)
}
haiti_dat <- haiti1_agg_data()
setwd("~/Desktop/haiti_thesis")
source("mod_tools.R")
source("mod_vis.R")
source("forecast_tools.R")
source("mod_build.R")
source("haiti1_vacscen.R")
source("haiti1.R")
source("haiti1_joint.R")
source("haiti1_agg_data.R")
source("haiti1_data.R")
source("haiti1_covars.R")
haiti_dat <- haiti1_agg_data()
################################################################################
## ARMA Benchmarks                                                            ##
################################################################################
## epidemic period
epi_haiti_dat <- haiti_dat  %>% filter(week <= 232)
epi_log_full_cases <- log(epi_haiti_dat$cases + 1)
epi_log_sum <- sum(log(epi_haiti_dat$cases + 1))
epi_arima_21 <- arima(epi_log_full_cases, order = c(2, 0, 1))
epi_arima_21$loglik - epi_log_sum # log lik = -1616.7
epi_log_sum
epi_log_full_cases <- log(epi_haiti_dat$cases + 1)
epi_log_sum <- sum(epi_log_full_cases)
epi_arima_21 <- arima(epi_log_full_cases, order = c(2, 0, 1))
epi_arima_21$loglik - epi_log_sum # log lik = -1616.7
## endemic period
end_haiti_dat <- haiti_data %>% filter(week > 232)
end_log_full_cases <- log(end_haiti_dat$cases + 1)
end_log_sum <- sum(end_log_full_cases)
## endemic period
end_haiti_dat <- haiti_dat %>% filter(week > 232)
end_log_full_cases <- log(end_haiti_dat$cases + 1)
end_log_sum <- sum(end_log_full_cases)
end_arima_21 <- arima(end_log_full_cases, order = c(2, 0, 1))
end_arima_21$loglik - end_log_sum # log lik = -1329.8
## endemic period
end_haiti_dat <- haiti_dat %>% filter(week > 232)
end_log_full_cases <- log(end_haiti_dat$cases + 1)
end_log_sum <- sum(end_log_full_cases, na.rm = TRUE)
end_arima_21 <- arima(end_log_full_cases, order = c(2, 0, 1))
end_arima_21$loglik - end_log_sum # log lik = -1329.8
end_log_sum
View(end_log_full_cases)
end_log_full_cases
################################################################################
## ARMA Benchmarks                                                            ##
################################################################################
## remove NA
arma_haiti_dat <- na.omit(haiti_dat)
View(arma_haiti_dat)
## epidemic period
epi_haiti_dat <- haiti_dat %>% filter(week <= 232)
epi_log_full_cases <- log(epi_haiti_dat$cases + 1)
epi_log_sum <- sum(epi_log_full_cases)
epi_arima_21 <- arima(epi_log_full_cases, order = c(2, 0, 1))
epi_arima_21$loglik - epi_log_sum # log lik = -1616.7
## endemic period
end_haiti_dat <- haiti_dat %>% filter(week > 232)
end_log_full_cases <- log(end_haiti_dat$cases + 1)
end_log_sum <- sum(end_log_full_cases, na.rm = TRUE)
end_arima_21 <- arima(end_log_full_cases, order = c(2, 0, 1))
end_arima_21$loglik - end_log_sum # log lik = -1329.8
## full period
log_full_cases <- log(haiti_dat$cases + 1)
log_sum <- sum(log(haiti_dat$cases + 1))
arima_21 <- arima(log_full_cases, order = c(2, 0, 1))
arima_21$loglik - log_sum # -3170.2
################################################################################
## ARMA Benchmarks                                                            ##
################################################################################
## epidemic period
epi_haiti_dat <- haiti_dat %>% filter(week <= 232)
epi_log_full_cases <- log(epi_haiti_dat$cases + 1)
epi_log_sum <- sum(epi_log_full_cases)
epi_arima_21 <- arima(epi_log_full_cases, order = c(2, 0, 1))
epi_arima_21$loglik - epi_log_sum # log lik = -1616.7
## endemic period
end_haiti_dat <- haiti_dat %>% filter(week > 232)
end_log_full_cases <- log(end_haiti_dat$cases + 1)
end_log_sum <- sum(end_log_full_cases, na.rm = TRUE)
end_arima_21 <- arima(end_log_full_cases, order = c(2, 0, 1))
end_arima_21$loglik - end_log_sum # log lik = -1329.8
## full period
log_full_cases <- log(haiti_dat$cases + 1)
log_sum <- sum(log_full_cases, na.rm = TRUE
## full period
log_full_cases <- log(haiti_dat$cases + 1)
log_sum <- sum(log_full_cases, na.rm = TRUE)
## full period
log_full_cases <- log(haiti_dat$cases + 1)
log_sum <- sum(log_full_cases, na.rm = TRUE)
arima_21 <- arima(log_full_cases, order = c(2, 0, 1))
arima_21$loglik - log_sum # -3170.2
View(haiti_dat)
View(arima_21)
5*2
-0.6207*2
+10
10-2*-0.6207
log_sum
2*5 - 2*(arima_21$loglik - log_sum)
